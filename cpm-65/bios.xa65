;FLOPPY DISK BIOS FUER DIE UDC-KARTE
;NACH ELEKTOR COMPUTING 6

;D. LAUSBERG	(C) 1987
;V1.2	11.11.88
;V1.3	13.12.89	PRINTER ROUTINES
;V1.4	14.06.90	NEW PARAMETERS
;V1.5	14.10.90	IMPROVEMENTS
;V1.6	10.11.91	ASM-65 EXTENDED VERSION
;V2.0	20.11.91	IRQ BASED VERSION
;V2.1	27.05.92	BOOT ROM VERSION
;V2.2	18.06.92	INCREASED SPEED, FORMAT TRACK
;V2.3	09.03.93	DOUBLE DRIVE
;V2.4	21.02.95	new memory map
;V2.5	27.03.95	SCSI support
;V2.6	09.12.95	2 logical SCSI discs
;V2.7	26.07.98	slightly modified memory map
;V2.8	30.06.00	change to sector bios
;V2.9	08.11.02	disk parameters corrected
;V2.A	25.03.21	4 Floppies + 2 HD Drives
;V2.B	30.05.21	SCSI2SD corrections interim fix, I2C commands
;V3.0	07.02.22	BOOTPROM v3.0 version
;V3.1	25.03.23	BOOTPROM v3.2 version
;V3.2	06.07.23	SCSI Write error correction
; 01.04.2025 port to fs65sbc by Fabio Sturman
;            fabio.sturman@gmail.com

VERSION	= $32		;VERSION NUMBER

;change according your dir structure

#include "../../m65/m65.i"
#include "./card.xi65"

;PAGE 00 CELLS

DMAV	= $CE		;DMA-VECTOR
DIRBFV	= $CC		;DIRBF-VECTOR
BIOSP	= $CA		;BIOS-POINTER
DPHV	= $C8		;DPH-VECTOR
JPBDOS	= $C0

;SYSTEM CONSTANTS

CCP	= $CA00
BEGIN	= $D600

;CONSTANTS

; disk 4MiB = 256 tracks of 64 sectors/track
; 1 system track and 256 directory entries

MAXTRK	= 256		;MAX TRACKS

SPT	= 64		;SECTORS PER TRACK
SPTDIV	= 6		;log(2) SPT
SPB	= 8		;SECTORS PER BLOCK
SPBDIV	= 3		;LOG(2) SPB
SYS	= 64		;SYSTEM sectors
BPD	= (MAXTRK*SPT-SYS)/SPB-1	;BLOCKS PER DISK
DIRSCS	= 32		;DIRECTORY SECTORS
DIRMSK	= %11110000	;DIR MASK FOR BAT
RPEXT	= 8*SPB*2 	;RECORD PER EXTENT
BATSIZ	= BPD/8		;SIZE OF BAT


;==========================================

	* = BEGIN

FBIOS	JMP BOOT		; 00
	JMP WBOOT		; 01
	JMP CONST		; 02
	JMP CONIN		; 03
	JMP CONOUT		; 04
	JMP LIST		; 05
	JMP AUXOUT		; 06
	JMP AUXIN		; 07
	JMP HOME		; 08
	JMP SELDSK		; 09
	JMP SETTRK		; 0A
	JMP SETSEC		; 0B
	JMP READ		; 0C
	JMP WRITE		; 0D
	JMP LISTST		; 0E
	JMP VERSION		; 0F
	JMP MONITOR		; 10

;========== DATA AREA =============

DSKOFS	.byt %00000000	;4M a
	.byt %01000000	;4M b
	.byt %10000000	;4M c
	.byt %11000000	;4M d

SECS	.word 0
	.byt 0

DRIVE	.byt 0

DPH	.word DIRBF	;DISK PARAMETER HEADER
	.word DMA	;FOR DRIVE A-D
	.word BAT

	.byt SPB-1	;DISK PARAMETER BLOCK FOR DISK A-D
	.byt SPBDIV
	.word BPD
	.byt DIRSCS
	.byt DIRMSK
	.byt RPEXT
	.byt SYS,0,0
	.byt BATSIZ

BAT	.byt %11110000	;Block Allocation Table Drive A-D
	.DSB $FF,0	;max. 1 page


BOOT	LDA #$4C	;SET JMP BDOS
	STA JPBDOS
	LDA #<CCP
	STA JPBDOS+1
	LDA #>CCP
	STA JPBDOS+2
	JSR HOME	;HOME BOOT DISK
	LDA DRIVE	;SELECT BOOT DRIVE
	LDX #$0E	;VIA BDOS
	JSR JPBDOS
	LDX #0 		;WARM BOOT
	JMP JPBDOS


WBOOT	LDA DRIVE	;SELECT DEFAULT DRIVE
	JSR SELDSK
	RTS

CONST	JMP jmcont

CONIN	JMP jmconr

CONOUT	JMP jmconw

LIST	RTS

LISTST	RTS

AUXOUT	RTS

AUXIN	RTS

MONITOR	JMP jmwrm

HOME	CLC
	RTS


SELDSK	CMP #4			;TEST FOR DRIVE A-D
	BCS SELDSE
	STA DRIVE		;SELECT DISK LOGICAL
	LDA #<DPH		;SET DPHVEC
	STA DPHV
	LDA #>DPH
	STA DPHV+1
	CLC
	RTS

SELDSE	LDA #$F9		;ILLEGAL DRIVE NR
	SEC
	RTS


SETSEC	TAX			;sector pointer for p.00 in Accu
	LDA 0,X
	STA SECS
	LDA 1,X
	STA SECS+1
	LDA 2,X
	STA SECS+2
	RTS


SETTRK	LDA #$FB		;Sector not found
	SEC
	RTS


RWCOM	LDX DRIVE
	CPX #4		;CHECK FOR DRIVE > D
	BCS RWCOMQ
	LDA DSKOFS,X
	ORA SECS+1
	TAX
	LDA SECS
;save LBA0 and LBA1
#if CARD = CF
	JSR jmcfll
#else
	JSR jmsdll
#endif
	LDA SECS+2
	LDX #0
;save LBA2 and LBA3
#if CARD = CF
	JSR jmcflh
#else
	JSR jmsdlh
#endif
	CLC
RWCOMQ	RTS


READ	JSR RWCOM
	BCS SELDSE 
	LDA #<BUF512
	LDX #>BUF512
; reads sector in LBA
#if CARD = CF
	JSR jmcfr	
#else
	JSR jmsdr
#endif
	CMP #0
	BNE READER
	LDY #0

READL	LDA BUF512,Y	;buffer used by CF read sector
	STA (DMAV),Y
	INY
	BNE READL
	CLC
	RTS

READER	SEC
	RTS


WRITE	JSR RWCOM
	BCS SELDSE
	LDY #0
WRITEL	LDA (DMAV),Y
	STA BUF512,Y
	INY
	BNE WRITEL
	LDA #<BUF512
	LDX #>BUF512
; write sector in LBA
#if CARD = CF
	JSR jmcfw
#else
	JSR jmsdw
#endif
	cmp #0
	BNE READER
	CLC
	RTS


GET_VERSION			;GET VERSION NUMBER
	LDA #VERSION
	RTS


DMA	= *

DIRBF	=  DMA+256

BUF512	=  DIRBF+256


END	= BUF512+512
