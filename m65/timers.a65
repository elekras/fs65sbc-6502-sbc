;
;----------------------------------------------------------
; fsm65 -fs65sbc simple monitor
;----------------------------------------------------------
; timers.a65 - acia related routines
; by Fabio Sturman
; fabio.sturman@gmail.com
;----------------------------------------------------------
; via0
; timer1 system timer
; acr<= %01xx-xxxx for t1 continuos interrupt
; load t1cl<= <40000 t1ch<= >40000
; ier<=%x1xx-xxxx
; 4xsoft timer 8 bit ~5.12s
; 1xsoft timer 32 bit ~ 994 d
;
; sr mode4 freerunning timer2l 
; pcr<= %xx0x-xxxx t2cl<= 250 t2ch<=0
; buzzer on cb2 or cb1. T(squarewave on cb1)=2*(n+2)
; sr stop   acr<=xxx0-00xx
; sr start  acr<=xxx1-00xx
;
TIMER_SLICE     = 39986 ;19993 ;39986 ;40000
BUZZER_TIME_ON  = 5 ;80-100ms
;
	;.define TIMER8_DEF
;
buzzer_init:
	lda #124 ; ;150 ;200 ;250
	sta t2cl0
	lda #0
	sta t2ch0
	lda pcr0
	and #%11011111
	sta pcr0
;
beep:
	bit fsmflags
	bpl buzzer_start0
mbuz:
buzzer_on:
	lda #BUZZER_TIME_ON
	sta timer8_4
;
buzzer_start:
	lda acr0
	and #%11100011
	ora #%00010000
	sta acr0
	lda #$0f ;0f ;33
	sta sr0
buzzer_start0:
	rts
;
timers_init:
	lda #<TIMER_SLICE
	sta t1cl0
	lda #>TIMER_SLICE
	sta t1ch0
	lda acr0
	and #%00111111
	ora #%01000000
	sta acr0
	lda #0
	sta sys_timer
	sta sys_timer+1
	sta sys_timer+2
	sta sys_timer+3
	sta timer8_4
	.ifdef TIMER8_DEF
	sta timer8_0
	sta timer8_1
	sta timer8_2
	sta timer8_3
	mov_n2x rtsp, timer8_0_vec  ; init timer vector to rts
	mov_n2x rtsp, timer8_1_vec
	mov_n2x rtsp, timer8_2_vec
	mov_n2x rtsp, timer8_3_vec
	.endif
	lda #%11000000  ; enable only int from t1
	sta ier0
	lda #%00111111
	sta ier0               
	rts
;
	.ifdef TIMER8_DEF                
;
; a=timer val  x=timer index 0..3
;
timer8_start:
	pha
	txa
	and #3
	tax
	pla
	sta timer8_0,x
	rts
;
timer8_vec:
	txa
	asl a
	tax
	jmp (timer8_0_vec,x) 
	.endif
;
; reads system timer
; out: xa: points to buf
;
mtimr:
sys_timer_get:
	sei
	lda t1ch0
	sta temp+4
;
	lda sys_timer
	sta temp
	lda sys_timer+1
	sta temp+1
	lda sys_timer+2
	sta temp+2
	lda sys_timer+3
	sta temp+3
	cli
	lda #<temp
	ldx #>temp
	rts
;
; command read system timer from cl
;
cmd_sys_timer:
	jsr sys_timer_get
	mov_x2ay temp+2
	jsr put_w_hex
	mov_x2ay temp
	jsr put_w_hex
	jmp no_er
;
; via0 interrupt service routine
;
; timer8_4  buzzer timer
;
via_int:
	lda ifr0
	bpl @q
	lda t1cl0
;
	jsr cts				; test for cts=0
	bne @s
	lda #$05			; if cts=0 turn tx irq on
	sta acia_command
@s:
	lda timer8_4		; buzzer
	beq @a
	dec timer8_4
	bne @a
	lda acr0			; buzzer off
	and #%11100011
	sta acr0 
;
@a:
	.ifdef TIMER8_DEF
	ldx #3				; decrement timers if !=0
@0: 
	lda timer8_0,x
	beq @1
	dec timer8_0,x
	bne @1
	phx
	jsr timer8_vec		; if timer==0 jmp to timeout routine
	plx
@1:
	dex
	bpl @0
	.endif
@m:
	inc sys_timer
	bne @q
	inc sys_timer+1
	bne @q
	inc sys_timer+2
	bne @q
	inc sys_timer+3
@q:
	jmp acia_int
;

