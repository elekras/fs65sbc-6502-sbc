;-----------------------------------------------------------------------------
; fsm65 fs monitor for 6502
; Fabio Sturman (c) 2019,20,21,22
; fabio.sturman@gmail.com
;-----------------------------------------------------------------------------
; a65 - 6502 assembler file
; i65 - 6502 include file
; assembled using cc65 suite
; assembler: ca65
; linker: ld65
;-----------------------------------------------------------------------------
; interrupt.a65
;-----------------------------------------------------------------------------
; Interrupt handlers
;-----------------------------------------------------------------------------
;
; nmi_handler
;
nmi_handler:    pha
                phx
                phy
                jmp (nmi_vec)
;
;--------------------------------------------------------------------
;
; irq_handler
;
irq_handler:    pha
                phx
                phy
                tsx               ;test if brk
                lda $104,x
                and #$10           ; break bit
                bne brk_handler   ;irq_handler0
                jmp (irq_vec)     ;handle irq
;
;--------------------------------------------------------------------
;
; brk handling
;
brk_handler:    pla
                sta reg_y
                pla
                sta reg_x
                pla
                sta reg_a
                pla
                sta reg_cc
                pla
                sta reg_pc
                pla
                sta reg_pc+1
                tsx
                stx reg_sp
                dec reg_pc
                bne brk_handler1
                dec reg_pc+1
brk_handler1:   jmp (brk_vec)
;
;--------------------------------------------------------------------
;
; int_exit last step of int
;
int_exit:       ply
                plx
                pla
                rti
;
brk_exe:        jsr cmd_print_regs
                jmp warm
;
;--------------------------------------------------------------------
;
; run_taget - return to program which executed a brk
;           - jump command
;
run_target:     ldx reg_sp                  ;back to user stack
                txs
                lda reg_pc+1                ;save ms user pc for rti
                pha
                lda reg_pc                  ;save ls user pc for rti
                pha
                lda reg_cc                  ;save user condition codes for rti
                pha
                ldx reg_x
                ldy reg_y
                lda reg_a
                rti
;
       
