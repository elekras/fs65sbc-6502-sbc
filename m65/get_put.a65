;
;----------------------------------------------------------
; get_s - reads tring into cmd_buf max 80 chars
; and prints cr lf
; returns
;   c=0 for CR - ay pointer to text buffer - input data terminated by 0
;   c=1 for ^X (abort input)
;----------------------------------------------------------
;
mgets:
get_s:
	ldx #CMD_BUF_LEN-1
	ldy #0
@0:
	jsr get_c	;Get a char
	bcc @0		;Retry if no data ready
	cmp #LF		;ignore LF
	beq @0
	cmp #CR		;if CR return received string
	beq @q
	cmp #CTRL_X	;abort
	beq @x
	cmp #BS		;erase last char from buf
	beq @b
	cmp #DEL
	beq @b 
	bne @1
@b:
	cpy #0
	beq @0
	dey
	lda #BS
	jsr put_c	;erase last char entered
	lda #' '
	jsr put_c
	lda #BS
	jsr put_c
	bra @0
@1:
	cmp #' '
	bcc @0			;skip other control char
	jsr put_c		;echo char
	sta cmd_buf,y	;Save byte in buffer
	iny				;Increment offset
	dex				;Test for end of buffer
	bne @0			;Continue if buffer not full
	beq @x			;if buffer full abort
@q:
	lda #0			;Add terminating zero
	sta cmd_buf,y
	jsr put_cr_lf
	lda #<cmd_buf
	ldy #>cmd_buf
	clc
	bra @z
@x:
	jsr put_cr_lf
	sec
@z:
	rts
;
;----------------------------------------------------------
; put_s - print string in ay
; in:  ay pointer to nul terminated string
; out: c=0
;----------------------------------------------------------
;
mputs:
put_s:
	sta po
	sty po+1
@0:
	lda (po)
	beq @q
	jsr put_c
	inc_x po
	bra @0
@q:
	clc
	rts
;
;----------------------------------------------------------
; put_w_hex - print word hex in ya ()hl)
;----------------------------------------------------------
;
mputw:
put_w_hex:
	pha
	tya
	jsr put_c_hex
	pla
	jmp put_c_hex
;
;----------------------------------------------------------
; put sp, star, dot, cr-lf;
;----------------------------------------------------------
;
mputsp:
put_sp:
	lda #' '
	jmp put_c
;
put_star:
	lda #'*'
	jmp put_c
;
put_dot:
	lda #'.'
	jmp put_c   
;
mputcl:
put_cr_lf:
	pha
	lda #CR
	jsr put_c
	lda #LF
	jsr put_c
	pla
	rts
;
;----------------------------------------------------------
; put_c_hex - print acc hex
; in:  a data to print
; out: none
;----------------------------------------------------------
;
mputb:
put_c_hex:
	pha
	lsr a
	lsr a
	lsr a
	lsr a
	jsr put_nib_hex
	pla
;
put_nib_hex:
	and #$0f
	ora #'0'
	cmp #'9'+1
	bcc @0
	adc #6
@0:
	jmp put_c
;
;----------------------------------------------------------
; put_c_hex + cr + lf
;----------------------------------------------------------
;
put_c_hex_cr_lf:
	jsr put_c_hex
	jmp put_cr_lf
;
;----------------------------------------------------------
; get_c_hex  - read hex byte in acc two hex digits from buf
; in:  none
; out: a=data, c=0 ok, c=1 no ok
;----------------------------------------------------------
;
get_b_hex:
get_c_hex:
	jsr scan
	beq @x
	jsr is_hex
	bcs @x
	asl a
	asl a
	asl a
	asl a
	sta count+1
	jsr scan
	beq @x
	jsr is_hex
	bcs @x
	ora count+1
	clc
	bra @q
@x:
	sec
@q:
	rts
;
get_b_bcd:
	jsr get_c_hex
	tax
	and #$0f
	cmp #10
	bcc @cc
	txa
	and #$f0
	cmp #$a0
	bcc @cc
	sec
	bra @q
@cc:
	clc
@q:
	txa
	rts
;
;-----------------------------------------------------------
; get_hex - get hex number in ra from buf
; stops at first non hex digit
;-----------------------------------------------------------
;
get_w_hex:
get_hex:
	stz ra
	stz ra+1
	jsr scan0
@0:
	jsr is_hex
	bcs @q
	asl ra    ; reg0 * 16
	rol ra+1
	asl ra
	rol ra+1
	asl ra
	rol ra+1
	asl ra
	rol ra+1
	ora ra
	sta ra
	jsr scan
	bra @0
@q:
	rts
;
;-----------------------------------------------------------
; is_hex -test if acc valid hex c=0 if ok
;-----------------------------------------------------------
;
is_hex:
	cmp #'0'
	bcc @ko
	cmp #':'
	bcc @ok
	and #$df		; to upper case
	cmp #'A'
	bcc @ko
	cmp #'G'
	bcs @ko
	sec
	sbc #('A'-10)
@ok:
	and #$0f
	clc
    bra @q
@ko:
	sec
@q:
	rts
;
;----------------------------------------------------------
; scan - increment index & read char from (po)
;----------------------------------------------------------
;
scani:
	ldy #$ff		;init scan
	sty scany
scan:
	inc scany		;scan next
scan0:
	ldy scany		;reread
	lda cmd_buf,y
	rts
;
mtoupc:
toupper:
	cmp #'a'
	bcc @ex		;not lower case
	cmp #'{'
	bcs @ex		;not lower case
	and #$df
@ex:
	rts
;
; delayms a=delay 0.5ms
;
mdhms:
delayhalfms:
	phx
	phy
	tay
@dl0:
	ldx #$c7
@dl:
	dex
	bne @dl
	dey
	bne @dl0
	ply
	plx
	rts
;
