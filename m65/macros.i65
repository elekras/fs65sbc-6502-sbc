;----------------------------------------------------------
;
;  mov_ay2x xx
; 
                .macro mov_ay2x xx
                sta xx
                sty xx+1
                .endmacro
;
;  mov_ax2x xx
; 
                .macro mov_ax2x xx
                sta xx
                stx xx+1
                .endmacro
;
; mov_n2x n16, x  -- low(n16)->x   high(n16)->x+1
;
                .macro mov_n2x num, xx
                lda #<num
                ldy #>num
                sta xx
                sty xx+1
                .endmacro
;
; mov_x2y x, y
;
                .macro mov_x2y xx, yy
                lda xx
                ldy xx+1
                sta yy
                sty yy+1
                .endmacro
;
;  mov_n2ay n
; 
                .macro mov_n2ay num
                lda #<num
                ldy #>num
                .endmacro
;
; mov_x2ay  x 
;
                .macro mov_x2ay xx
                lda xx
                ldy xx+1
                .endmacro
;
;  mov_n2ax n
; 
                .macro mov_n2ax num
                lda #<num
                ldx #>num
                .endmacro
;
; mov_x2ax  x 
;
                .macro mov_x2ax xx
                lda xx
                ldx xx+1
                .endmacro
;
; print_s ad
;
                .macro print_s ad
                lda #<ad
                ldy #>ad
                jsr put_s
                .endmacro
;
; print_cr_lf
;
                .macro print_cr_lf
                jsr put_cr_lf
                .endmacro
;
; print_sp
;
                .macro print_sp
                jsr put_sp
                .endmacro
;
; print_w_hex ad
;
                .macro print_w_hex ad
                lda ad
                ldy ad+1
                jsr put_w_hex
                .endmacro
;
; print_c c
;
                .macro print_c c
                lda #c
                jsr put_c
                .endmacro
;
; inc_ptr ptr
;
                .macro inc_ptr ptr
                .local l1
                inc ptr
                bne l1
                inc ptr+1
l1:
               .endmacro
;
; bit_test flag, mask
;
                .macro bit_test flag, mask
                lda #mask
                and flag
                .endmacro
;
; bit_set flag, mask
;
                .macro bit_set flag, mask
                lda #mask
                ora flag
                sta flag
                .endmacro
;
; bit_clear flag, mask
;
                .macro bit_clear flag, mask
                lda #mask
                eor #$ff
                and flag
                sta flag
                .endmacro
;
; inc_x arg1 - increment
;
                .macro inc_x reg
                ldx #reg
                jsr inc_zz	;reginc
                .endmacro
;
; dec_x arg1 - decrement
;
                .macro dec_x reg
                ldx #reg
                jsr dec_zz		;regdec
                .endmacro
;
; test_x arg1 - test if zero
;
                .macro test_x reg
                ldx #reg
                jsr test_zz		;regzer
                .endmacro
;
                .macro debug_c c
                php
                pha
                lda #c
                jsr put_c
                pla
                plp
                .endmacro

