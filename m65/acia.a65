;
;----------------------------------------------------------
; m65 - fs65sbc simple monitor
;----------------------------------------------------------
; acia.a65 - acia and soft acia related routines
; by Fabio Sturman (c) 2019,2023
; fabio.sturman@gmail.com
;----------------------------------------------------------
;
CRYSTAL         = 36864
;CRYSTAL         = 18432
;
.if CRYSTAL = 18432
; crystal 1.8432 MHz
BAUD_4800       = $c
BAUD_7200       = $d
BAUD_9600       = $e
BAUD_19200      = $f
BAUD_115200     = $0
;
; BAUD is passed from command line
;
.if BAUD = 115200
    ACIA_BAUD = BAUD_115200
.elseif BAUD = 19200
    ACIA_BAUD = BAUD_19200
.elseif BAUD = 9600
    ACIA_BAUD = BAUD_9600
.elseif BAUD = 7200
    ACIA_BAUD = BAUD_7200
.elseif BAUD = 4800
   ACIA_BAUD = BAUD_4800
.else
   ACIA_BAUD = BAUD_4800
.endif
.endif
;
.if CRYSTAL = 36864
; crystal 3.6864 MHz
BAUD_9600       = $c
BAUD_14400      = $d
BAUD_19200      = $e
BAUD_38400      = $f
BAUD_230400     = $0
;
; BAUD is passed from command line
;
.if BAUD = 230400
    ACIA_BAUD = BAUD_230400
.elseif BAUD = 38400
    ACIA_BAUD = BAUD_38400
.elseif BAUD = 19200
    ACIA_BAUD = BAUD_19200
.elseif BAUD = 14400
    ACIA_BAUD = BAUD_14400
.elseif BAUD = 9600
    ACIA_BAUD = BAUD_9600
.else
   ACIA_BAUD = BAUD_9600
.endif
.endif
;
;---------------------------------------------------------------------
; acia_init - acia initialization
; in:  none
; out: none
;---------------------------------------------------------------------
;
; interrupt driven
;
acia_init:
	stz rx_cnt
	stz rx_tail
	stz rx_head
	stz tx_head
	stz tx_tail
	stz tx_cnt
	stz acia_reset
;
	;lda #ACIA_BAUD+$10
	lda #$1f
	sta acia_control
;
	lda #$09	; No parity, no rx echo, rts true, rx irq, tx no irq
	sta acia_command
	jsr cts_init
	jmp rts_init
;
;---------------------------------------------------------------------
; get_c - read char vectored through getc_vec
; in:     do not care
; out:    valid char in A if C=1 else no char
;---------------------------------------------------------------------
;
mconr:
get_c:
	jmp (getc_vec)
;
; inkey test if data avail
;
mcont:
get_c_con_test:
	sec
	lda rx_cnt
	bne @q
	clc
@q:
	rts
;
;---------------------------------------------------------------------
; get_c_con - read char from serial port buffer
; in:   do not care
; out:  A = data Byte
;       C = 0 no data in A
;       C = 1 data in A
; tests also if enough space in buffer to reenable
; remote transmitter
;---------------------------------------------------------------------
;
; interrupt mode
;
get_c_con:
	phy
	lda rx_cnt
	beq @1
	cmp #$70		; test if buffer less than 87%
	bcs @0
	jsr rts_0		; if yes reenable tx data from sender (RTS<-0)
@0:
	lda rx_head
	and #$7f
	tay
	lda rx_buf,y
	inc rx_head
	dec rx_cnt
	sec
	bra @2
@1:
	clc
@2:
	ply
	rts
;
; get_c_blk - blocking receiving routine
;
get_c_blk:
	jsr get_c_con
	bcc get_c_blk
	rts
;
;---------------------------------------------------------------------
; put_c - put character vectored through putc_vc
; in:    A=data to transmitt
; out:   C=0
;---------------------------------------------------------------------
;
mconw:
put_c:
	jmp (putc_vec)
;
;---------------------------------------------------------------------
; put_c_con - prints to serial port
; test  for cts
; no wait if buffer is full.
; use: none
; in:  A = data
; out: A = data
; C=0 no room or tx disabled by receiver via ctsd
; C=1 ok
;---------------------------------------------------------------------
;
; interrupt mode
;
put_c_con:
	phy
	pha
	jsr cts		; test cts
	bne @q		; if 1 exit with c=0
	ldy tx_cnt
	bmi @q		; if no room  exit c=0
	pla
	pha
	pha
	lda tx_tail
	and #$7f
	tay
	pla
	sta tx_buf,y
	inc tx_tail
	inc tx_cnt
	ldy #$05
	sty acia_command	; turn on tx int
	sec					; exit with c=1
	bra @e
@q:
	clc
@e:        
	pla
	ply
	rts
;
put_c_blk:
	jsr put_c_con
	bcc put_c_blk
	rts
;
;---------------------------------------------------------------------
; acia_int - interrupt service routine
; reads char fron acia and stores in rx_buf
; tests space in buffer and if low disables
; transmitter
;---------------------------------------------------------------------
;
acia_int:
	lda acia_status
	bpl @q			;no acia int
	bit #%00001000	;test if rx int
	bne @rx			;is rx int
	bit #%00010000	;test if tx int
	bne @tx			;is tx int
	bra @q			;exit int
@rx:
	bit #%00000010	;test for framing error
	beq @nb			;rxdf+frer=break
	lda acia_data	;clear int flags
	inc breakf
	bra @c
@nb:    
	lda rx_tail		; tx tail uses only 7 bits
	and #$7f
	tay
	lda acia_data
	sta rx_buf,y
	inc rx_tail
	inc rx_cnt		; test if rx fuffer @ 90%
	lda rx_cnt
	cmp #$75
	bcc @c			; if less continue
	jsr rts_1		; rts<-false
@c:
	lda acia_status	; test if tx int
	and #%00010000
	beq @q			; if not exit
@tx:
	jsr cts
	bne @txo
	lda tx_cnt		; any characters to xmit?
	beq @txo		; no, turn off xmit
	lda tx_head		; tx_head uses only 7 bits
	and #$7f
	tay
	lda tx_buf,y	; next ch from tx buf
	sta acia_data	; send the data
	inc tx_head
	dec tx_cnt		; decrement counter
	bra @q			; if not zero, exit
@txo:
	ldy #$09            ;get mask for xmit off / rcv on (2)
	sty acia_command    ;turn off xmit irq bits (5)
@q:
	jmp int_exit
;
; acia0 rts(out)=PB2
;
RTS_DDR		= ddrb0
RTS_PORT	= portb0
RTS_MASK	= $04
;
rts_init:
	lda RTS_DDR
	ora #RTS_MASK
	sta RTS_DDR
;                
rts_0:
	lda RTS_PORT
	and #<~RTS_MASK
	sta RTS_PORT
	rts
;
rts_1:
	lda RTS_PORT
	ora #RTS_MASK
	sta RTS_PORT
	rts
;
; acia0 cts(in)=PB4
;
CTS_DDR		= ddrb0
CTS_PORT	= portb0
CTS_MASK	= $10
;
cts_init:
	lda CTS_DDR
	and #<~CTS_MASK
	sta CTS_DDR
	rts
;                
cts:
	lda CTS_PORT
	and #CTS_MASK
	rts
;
;---------------------------------------------------------------------
; acia1_init - soft acia on VIA0 pb0,1
; 1200,8,n,1
;---------------------------------------------------------------------
;
ACIA1_TX_MASK	= 1
ACIA1_CTS_MASK	= 2
ACIA1_PORT		= portb0
ACIA1_DDR		= ddrb0
ACIA1_DELAY		= 233	;1200
;
; INIT ACIA1
; use: a
; in:  none
; out: none
;
; pb0=tx
; pb1=cts
;
acia1_init:
	lda ACIA1_DDR
	and #<~ACIA1_CTS_MASK	;cts in
	ora #ACIA1_TX_MASK		;tx out
	sta ACIA1_DDR
;
	lda ACIA1_PORT			;tx<-1
	ora #ACIA1_TX_MASK
	sta ACIA1_PORT
	rts
;
; acia1_cts - test if ACIA1 READY TO TX
; use: a
; in: none
; out: z=1 on ready
;
mlstt:
acia1_cts:
	lda ACIA1_PORT
	and #ACIA1_CTS_MASK
	rts
;
; acia1_put_c - tx CHAR ON ACIA1
; use: none
; in:  a=char
; out: none
;
mlstw:
acia1_put_c:
	sta dout
	pha
	phx
	phy
	ldx #8		; bit counter
;
	lda ACIA1_PORT			; start bit
	and #<~ACIA1_TX_MASK
	sta ACIA1_PORT
	jsr acia1_bit_dly
@0:
	lda ACIA1_PORT
	and #<~ACIA1_TX_MASK	;tx bit<-0
	ror dout
	bcc @1
	ora #ACIA1_TX_MASK	;tx bit<-1
@1:
	sta ACIA1_PORT
	jsr acia1_bit_dly
	dex
	bne @0
;
	lda ACIA1_PORT			; stop bit
	ora #ACIA1_TX_MASK
	sta ACIA1_PORT
	jsr acia1_bit_dly
;
	ply
	plx
	pla
	rts
;
; DELAY FOR 1 BIT
;
acia1_bit_dly:
	ldy #ACIA1_DELAY
@l:
	dey
	nop
	bne @l
	rts
;
